% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/event-loop.R
\name{run_loop}
\alias{run_loop}
\title{Run the user supplied function within an event loop in a new graphics window}
\usage{
run_loop(
  user_func,
  width = 7,
  height = 7,
  fps_target = 30,
  show_fps = FALSE,
  double_buffer = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{user_func}{user-supplied callback function. This function will be
       run by the system at the rate specified by \code{fps_target}.

       At a minimum, this function should accept the \code{...} argument,
       but the current full list of allowed arguments is:
       \describe{
         \item{\code{event}}{ - Event information from the graphics device.
               This is NULL when no event occurred, otherwise it is a list
               with a \code{type} element where:
               \itemize{
               \item{\code{event$type = 'mouse_down'} indicates a mouse button
                     was clicked. \code{event$button} gives the integer
                     index of the button.}
               \item{\code{event$type = 'mouse_up'} indicates a mouse button
                     was released. \code{event$button} gives the integer
                     index of the button.}
               \item{\code{event$type = 'mouse_move'} indicates the mouse
                     was moved. \code{event$button} gives the integer
                     index of the button being pressed}
               \item{\code{event$type = 'key_press'} indicates a key was pressed
                     on the keyboard. \code{event$str} holds the identifier as
                     to what was pressed as
                     a string value. Note: this string can be multiple characters because
                     of how the graphics device treats modifier keys like CTRL,
                     and arrow keys (UP, LEFT, RIGHT, DOWN).  See docs for
                     \code{grDevices::setGraphicsEventHandlers} to learn more.}
               }
         }
         \item{\code{mouse_x, mouse_y}}{ - current location of mouse within window in normalised
         coordinates in the range [0, 1]. If mouse is
       not within window, this will be set to the last available coordinates}
         \item{\code{frame_num}}{ - Current frame number (integer)}
         \item{\code{fps_actual, fps_target}}{ - the curent framerate and the framerate specified
       by the user}
         \item{\code{dev_width, dev_height}}{ - the width and height of the output device
         in pixels. Note: this does not cope with window resizing}
         \item{\code{...}}{ - Catch any other arguments.  Note that this is
               a required argument in all \code{user_func} callback functions}
       }}

\item{width, height}{size of graphics device to open in inches. Default: 7x7 inches}

\item{fps_target}{target frames-per-second.  If rendering speed surpasses
this then slight pauses will be added to each loop to bring this
back to the target rate. Set to NA to run as fast as possible.  Note
that even though the user supplied function might be called at a very
high rate, the actual screen update rate may be much much lower.}

\item{show_fps}{show the fps as text in the bottom left of the window.
Default: FALSE}

\item{double_buffer}{use a double buffered device? Default: TRUE.  A
double buffered device is essential if you are updating the display
every frame e.g. a game of SuperMario.   For more static games
e.g Chess, there's no need to double buffer as you are only updating
the game when user events occur (like moving a chess piece).  Double
buffered devices avoid "screen tearing" when rendering, but because
of the way R handles the dev.hold/dev.flush operations, the mouse
will flicker between a normal pointer and a busy pointer.}

\item{verbose}{Show more debugging information. Default: FALSE}
}
\value{
This function returns only when the user presses \code{ESC} within
        the window, or some other terminating condition occurs.
}
\description{
Create a new \code{X11()} graphics device and setup event callbacks such
that the user-supplied callback function is run with appropriate
parameters at the specified rate.
}
